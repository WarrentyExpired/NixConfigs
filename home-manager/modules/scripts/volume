#!/usr/bin/env bash
# i3 volume control with dynamic colors and custom formatting

# Get the name of the default sink
sink_name=$(pactl info | grep 'Default Sink' | awk '{print $3}')

# Run pactl command and capture the output
output=$(pactl list sinks | grep -A 15 "Name: $sink_name" | awk '/Volume:/{print $5; exit}')

# Extract the volume percentage using string manipulation
volume=$(echo "$output" | tr -d '%')

# Check if the sink is muted
mute_status=$(pactl list sinks | grep -A 15 "Name: $sink_name" | awk '/Mute/{print $2; exit}')

# Determine the foreground color based on volume level
volume_color="#ffbf00"
# if [ "$mute_status" == "yes" ]; then
#     volume_color="#B48EAD" # Magenta for muted (from Kitty scheme)
# else
#     if [ "$volume" -lt 30 ]; then
#         volume_color="#94E2D5" # Green for low volume
#     elif [ "$volume" -lt 70 ]; then
#         volume_color="#EBCB8B" # Yellow for medium volume
#     else
#         volume_color="#BF616A" # Red for high volume
#     fi
# fi

# Print the volume level or mute status
if [ "$mute_status" == "yes" ]; then
    echo "<span foreground='#000000' background='#ffbf00'> VOL </span><span foreground='#ffbf00' background='#0f1c21aa'> MUTED</span>"
else
    echo "<span foreground='#000000' background='#ffbf00'> VOL </span><span foreground='$volume_color' background='#0f1c21aa'> $volume%</span>"
fi

# Define click events
case $BLOCK_BUTTON in
    1)  # Left click: Toggle mute
        pactl set-sink-mute "$sink_name" toggle
        ;;
    4)  # Scroll up: Increase volume
        pactl set-sink-volume "$sink_name" +5%
        ;;
    5)  # Scroll down: Decrease volume
        pactl set-sink-volume "$sink_name" -5%
        ;;
esac
